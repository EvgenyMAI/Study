import numpy as np
import matplotlib.pyplot as plt

# –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —É—Ä–∞–≤–Ω–µ–Ω–∏—è
def rhs(x, y, dy):
    return 2 * y * (1 + np.tan(x) ** 2)

# –¢–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
def analytical(x):
    return -np.tan(x)

# –ú–µ—Ç–æ–¥ –†—É–Ω–≥–µ‚Äì–ö—É—Ç—Ç—ã 4-–≥–æ –ø–æ—Ä—è–¥–∫–∞
# –†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –ö–æ—à–∏ –º–µ—Ç–æ–¥–æ–º –†—É–Ω–≥–µ‚Äì–ö—É—Ç—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ —Å—Ç—Ä–µ–ª—å–±—ã).
def rk4_solver(f, x_start, y_start, dy_start, step, steps):
    x_data, y_data, dy_data = [x_start], [y_start], [dy_start]
    for _ in range(steps):
        x, y, dy = x_data[-1], y_data[-1], dy_data[-1]

        k1 = step * dy
        l1 = step * f(x, y, dy)

        k2 = step * (dy + l1 / 2)
        l2 = step * f(x + step / 2, y + k1 / 2, dy + l1 / 2)

        k3 = step * (dy + l2 / 2)
        l3 = step * f(x + step / 2, y + k2 / 2, dy + l2 / 2)

        k4 = step * (dy + l3)
        l4 = step * f(x + step, y + k3, dy + l3)

        y_next = y + (k1 + 2*k2 + 2*k3 + k4) / 6
        dy_next = dy + (l1 + 2*l2 + 2*l3 + l4) / 6

        x_data.append(x + step)
        y_data.append(y_next)
        dy_data.append(dy_next)

    return x_data, y_data, dy_data

# –ú–µ—Ç–æ–¥ —Å—Ç—Ä–µ–ª—å–±—ã
# –ü–æ–¥–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –æ—Ç—Ä–µ–∑–∫–∞ –ø–æ–ª—É—á–∏—Ç—å ùë¶(ùúã/6)=‚àí3^(1/2)/3
def shooting(f, x0, x1, y_start, y_end, h, guess1, guess2, tol=1e-8):
    n_steps = int((x1 - x0) / h)

    def boundary_miss(eta):
        _, y, _ = rk4_solver(f, x0, y_start, eta, h, n_steps)
        return y[-1] - y_end

    eta_prev, eta_curr = guess1, guess2
    while True:
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ—à–∞–µ–º –∑–∞–¥–∞—á—É –ö–æ—à–∏ –º–µ—Ç–æ–¥–æ–º –†—É–Ω–≥–µ‚Äì–ö—É—Ç—Ç—ã
        val_prev, val_curr = boundary_miss(eta_prev), boundary_miss(eta_curr)
        # –°–º–æ—Ç—Ä–∏–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–∞–ª–µ–∫–æ –º—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å –≤ —Ç–æ—á–∫–µ x=b
        if abs(val_curr) < tol or val_curr == val_prev:
            break
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Å–µ–∫—É—â–∏—Ö –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
        eta_next = eta_curr - val_curr * (eta_curr - eta_prev) / (val_curr - val_prev)
        eta_prev, eta_curr = eta_curr, eta_next

    x_vals, y_vals, _ = rk4_solver(f, x0, y_start, eta_curr, h, n_steps)
    return x_vals, y_vals

# –ö–æ–Ω–µ—á–Ω–æ-—Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥
# –ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –Ω–∞ —Ä–∞–∑–Ω–æ—Å—Ç–∏ ‚Äî —Å–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ —Ä–µ—à–∞–µ—Ç –µ—ë
def difference_scheme(x0, x1, y0, yN, n):
    h = (x1 - x0) / n
    # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—Ä–µ–∑–æ–∫ [a,b] –Ω–∞ n —É–∑–ª–æ–≤:
    x_points = np.linspace(x0, x1, n + 1)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä—ë—Ö–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    main_diag = -2 / h**2 + 2 * (1 + np.tan(x_points[1:-1])**2)
    lower_diag = upper_diag = np.ones(n - 1) / h**2
    rhs_vector = np.zeros(n - 1)
    rhs_vector[0] -= y0 / h**2
    rhs_vector[-1] -= yN / h**2

    alpha = np.zeros(n - 1)
    beta = np.zeros(n - 1)

    # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –º–µ—Ç–æ–¥–æ–º –ø—Ä–æ–≥–æ–Ω–∫–∏
    alpha[0] = -upper_diag[0] / main_diag[0]
    beta[0] = rhs_vector[0] / main_diag[0]
    for i in range(1, n - 1):
        denom = main_diag[i] + lower_diag[i] * alpha[i - 1]
        alpha[i] = -upper_diag[i] / denom
        beta[i] = (rhs_vector[i] - lower_diag[i] * beta[i - 1]) / denom

    y_sol = np.zeros(n + 1)
    y_sol[0], y_sol[-1] = y0, yN
    y_sol[-2] = beta[-1]
    for i in range(n - 3, -1, -1):
        y_sol[i + 1] = alpha[i] * y_sol[i + 2] + beta[i]

    return x_points, y_sol

# –ú–µ—Ç–æ–¥ –†—É–Ω–≥–µ‚Äì–†–æ–º–±–µ—Ä–≥–∞
# –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–µ—Ç–æ–¥ —Å –¥–≤—É–º—è —à–∞–≥–∞–º–∏ h –∏ h/2, –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
def rr_error(y_coarse, y_fine, order):
    y_c = np.array(y_coarse)
    y_f = np.array(y_fine)[::2][:len(y_c)]
    err_final = abs((y_f[-1] - y_c[-1]) / (2**order - 1))
    err_max = np.max(np.abs((y_f - y_c) / (2**order - 1)))
    return err_final, err_max

# –§—É–Ω–∫—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def plot_solution(x_num, y_num, method_name, x_exact=None, y_exact=None):
    plt.figure(figsize=(10, 5))
    if x_exact is not None and y_exact is not None:
        plt.plot(x_exact, y_exact, 'k-', label='–¢–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ', linewidth=2)
    plt.plot(x_num, y_num, 'o--', label=method_name, markersize=4)
    plt.title(f'–†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º: {method_name}')
    plt.xlabel('x')
    plt.ylabel('y(x)')
    plt.grid(True, linestyle='--', alpha=0.6)
    plt.legend()
    plt.tight_layout()
    plt.show()

def main():
    # –ì—Ä–∞–Ω–∏—Ü—ã –∏ —É—Å–ª–æ–≤–∏—è
    a, b = 0, np.pi / 6
    ya, yb = 0, -np.sqrt(3) / 3
    h = 0.01
    n = int((b - a) / h)

    # –†–µ—à–µ–Ω–∏—è
    x_shot, y_shot = shooting(rhs, a, b, ya, yb, h, -1.0, -2.0)
    x_fd, y_fd = difference_scheme(a, b, ya, yb, n)

    # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –†—É–Ω–≥–µ‚Äì–†–æ–º–±–µ—Ä–≥–∞
    x_shot_fine, y_shot_fine = shooting(rhs, a, b, ya, yb, h / 2, -1.0, -2.0)
    x_fd_fine, y_fd_fine = difference_scheme(a, b, ya, yb, 2 * n)

    # –û—Ü–µ–Ω–∫–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–µ–π
    err_shot_end, err_shot_max = rr_error(y_shot, y_shot_fine, 4)
    err_fd_end, err_fd_max = rr_error(y_fd, y_fd_fine, 2)

    print("== –ú–µ—Ç–æ–¥ —Å—Ç—Ä–µ–ª—å–±—ã ==")
    print(f"–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ: {err_shot_end:.3e}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å:     {err_shot_max:.3e}\n")

    print("== –ö–æ–Ω–µ—á–Ω–æ-—Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ ==")
    print(f"–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ: {err_fd_end:.3e}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å:      {err_fd_max:.3e}")

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    x_true = np.linspace(a, b, 500)
    y_true = analytical(x_true)

    plot_solution(x_shot, y_shot, method_name="–ú–µ—Ç–æ–¥ —Å—Ç—Ä–µ–ª—å–±—ã", x_exact=x_true, y_exact=y_true)
    plot_solution(x_fd, y_fd, method_name="–ö–æ–Ω–µ—á–Ω–æ-—Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥", x_exact=x_true, y_exact=y_true)

if __name__ == "__main__":
    main()