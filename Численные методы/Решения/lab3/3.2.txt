package org.example;

import java.util.Arrays;

public class Main {

    public static void main(String[] args) {
        // Данные задачи
        double[] x = {0.1, 0.5, 0.9, 1.3, 1.7};
        double[] f = {100.01, 4.25, 2.0446, 2.2817, 3.2360};
        double X_star = 0.8;

        int n = x.length - 1; // n = 4 интервала

        // Вычисляем шаги h[i] = x[i] - x[i-1] для i = 1..n
        double[] h = new double[n + 1];
        h[0] = 0;
        for (int i = 1; i <= n; i++) {
            h[i] = x[i] - x[i - 1];
        }

        // Формируем систему для поиска c1, c2, c3
        double[] A = new double[n - 1]; // нижняя диагональ
        double[] B = new double[n - 1]; // главная диагональ
        double[] C = new double[n - 1]; // верхняя диагональ
        double[] D = new double[n - 1]; // правая часть

        // Составляем систему уравнений
        for (int i = 2; i <= n; i++) {
            if (i == 2) {
                A[i - 2] = 0.0; // нет члена при c_{i-1}
                B[i - 2] = 2 * (h[i - 1] + h[i]);
                C[i - 2] = h[i];
                D[i - 2] = 3 * ((f[i] - f[i - 1]) / h[i] - (f[i - 1] - f[i - 2]) / h[i - 1]);
            } else if (i == n) {
                A[i - 2] = h[i - 1];
                B[i - 2] = 2 * (h[i - 1] + h[i]);
                C[i - 2] = 0.0; // нет члена при c_{i+1}
                D[i - 2] = 3 * ((f[i] - f[i - 1]) / h[i] - (f[i - 1] - f[i - 2]) / h[i - 1]);
            } else {
                A[i - 2] = h[i - 1];
                B[i - 2] = 2 * (h[i - 1] + h[i]);
                C[i - 2] = h[i];
                D[i - 2] = 3 * ((f[i] - f[i - 1]) / h[i] - (f[i - 1] - f[i - 2]) / h[i - 1]);
            }
        }

        // Решаем систему методом прогонки через отдельную функцию
        double[] solutionC = solveTridiagonal(A, B, C, D);

        double[] c = new double[n + 2]; // c[1..n+1]
        c[1] = 0.0; // Нулевая кривизна слева
        c[n+1] = 0.0; // Нулевая кривизна справа

        for (int i = 2; i <= n; i++) {
            c[i] = solutionC[i - 2];
        }


        double[] a = new double[n + 1];
        double[] b = new double[n + 1];
        double[] d = new double[n + 1];

        for (int i = 1; i <= n; i++) {
            a[i] = f[i - 1];
            d[i] = (c[i+1] - c[i]) / (3 * h[i]);
            b[i] = (f[i] - f[i - 1]) / h[i] - (h[i] / 3) * (2 * c[i] + c[i+1]);
        }

        int interval = 1;
        for (int i = 1; i <= n; i++) {
            if (X_star >= x[i - 1] && X_star <= x[i]) {
                interval = i;
                break;
            }
        }

        // Вычисляем значение сплайна в точке X_star
        double dx = X_star - x[interval - 1];
        double result = a[interval] + b[interval] * dx + c[interval] * dx * dx + d[interval] * dx * dx * dx;

        // Вывод результата
        System.out.printf("Значение функции в точке X* = %.3f: %.6f\n", X_star, result);

        for (int i = 1; i <= n; i++) {
            System.out.printf("[%.1f, %.1f]: a=%.6f, b=%.6f, c=%.6f, d=%.6f\n",
                    x[i - 1], x[i], a[i], b[i], c[i], d[i]);
        }
    }

    // Метод прогонки для решения трехдиагональной системы
    public static double[] solveTridiagonal(double[] a, double[] b, double[] c, double[] d) {
        int n = b.length;
        double[] P = new double[n];
        double[] Q = new double[n];
        double[] x = new double[n];

        // Прямой ход прогонки
        P[0] = -c[0] / b[0];
        Q[0] = d[0] / b[0];

        for (int i = 1; i < n; i++) {
            double denominator = b[i] + a[i] * P[i - 1];
            P[i] = (i == n - 1) ? 0 : -c[i] / denominator;
            Q[i] = (d[i] - a[i] * Q[i - 1]) / denominator;
        }

        // Обратный ход прогонки
        x[n - 1] = Q[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            x[i] = P[i] * x[i + 1] + Q[i];
        }

        return x;
    }
}
