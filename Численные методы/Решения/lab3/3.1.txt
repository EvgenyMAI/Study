package org.example;

import java.util.Arrays;

public class Main {

    // Функция f(x) = 1/x^2 + x^2
    public static double f(double x) {
        return 1.0 / (x * x) + x * x;
    }

    // Интерполяционный многочлен Лагранжа в точке x
    // Формула из методички через омега(x) и омега'(xi)
    public static double lagrange(double[] xi, double[] yi, double x) {
        int n = xi.length;

        // Вычисляем ω(x) = произведение (x - xi)
        double omega = 1.0;
        for (int i = 0; i < n; i++) {
            omega *= (x - xi[i]);
        }

        double result = 0.0;
        // Суммируем члены f(xi) * ω(x) / ((x - xi) * ω'(xi))
        for (int i = 0; i < n; i++) {
            double omegaPrime = 1.0;
            for (int j = 0; j < n; j++) {
                if (j != i) {
                    omegaPrime *= (xi[i] - xi[j]);
                }
            }
            result += (yi[i] / omegaPrime) * (omega / (x - xi[i]));
        }

        return result;
    }

    // Таблица разделённых разностей для Ньютона
    // Формула из методички: f(xi,xj) = (f(xi) - f(xj)) / (xi - xj), f(xi,xj,xk) = (f(xi,xj) - f(xj,xk)) / (xi - xk)
    public static double[][] dividedDifferences(double[] xi, double[] yi) {
        int n = xi.length;
        double[][] table = new double[n][n];

        // Заполняем первый столбец значениями функции f(xi)
        for (int i = 0; i < n; i++) {
            table[i][0] = yi[i];
        }

        // Заполняем таблицу разделённых разностей
        for (int j = 1; j < n; j++) {
            for (int i = 0; i < n - j; i++) {
                table[i][j] = (table[i][j - 1] - table[i + 1][j - 1]) / (xi[i] - xi[i + j]);
            }
        }

        return table;
    }

    // Интерполяционный многочлен Ньютона в точке x
    // Формула из методички: P(x) = f(x0) + (x-x0)f(x0,x1) + (x-x0)(x-x1)f(x0,x1,x2) + ...
    public static double newton(double[] xi, double[][] ddTable, double x) {
        double result = ddTable[0][0];
        double product = 1.0;

        for (int i = 1; i < xi.length; i++) {
            product *= (x - xi[i - 1]);
            result += ddTable[0][i] * product;
        }

        return result;
    }

    // Вычисление абсолютной погрешности интерполяции
    public static double absoluteError(double realValue, double approxValue) {
        return Math.abs(realValue - approxValue);
    }

    // Основной метод решения задачи
    public static void solve(double[] xi, double xStar, String label) {
        System.out.println("\nРешение для набора " + label + ":");

        // Вычисляем значения функции в узлах
        double[] yi = Arrays.stream(xi).map(Main::f).toArray();

        System.out.println("Точки (X, Y):");
        for (int i = 0; i < xi.length; i++) {
            System.out.printf("x[%d] = %.4f, y[%d] = %.6f%n", i, xi[i], i, yi[i]);
        }

        // Многочлен Лагранжа
        double lagrangeValue = lagrange(xi, yi, xStar);

        // Многочлен Ньютона
        double[][] ddTable = dividedDifferences(xi, yi);
        double newtonValue = newton(xi, ddTable, xStar);

        // Истинное значение функции
        double realValue = f(xStar);

        System.out.println("\nВычисления в точке X* = " + xStar + ":");
        System.out.printf("Истинное значение: f(%.2f) = %.6f%n", xStar, realValue);
        System.out.printf("Лагранжев интерполянт: L(%.2f) = %.6f%n", xStar, lagrangeValue);
        System.out.printf("Ньютонов интерполянт: N(%.2f) = %.6f%n", xStar, newtonValue);

        System.out.println("\nАбсолютные погрешности:");
        System.out.printf("|f(x*) - L(x*)| = %.6f%n", absoluteError(realValue, lagrangeValue));
        System.out.printf("|f(x*) - N(x*)| = %.6f%n", absoluteError(realValue, newtonValue));
    }

    public static void main(String[] args) {
        double[] xi_a = {0.1, 0.5, 0.9, 1.3};
        double[] xi_b = {0.1, 0.5, 1.1, 1.3};
        double xStar = 0.8;

        solve(xi_a, xStar, "а) {0.1, 0.5, 0.9, 1.3}");
        solve(xi_b, xStar, "б) {0.1, 0.5, 1.1, 1.3}");
    }
}
